@page "/blogarticles"

@attribute [Authorize]

@inject IMediator mediator


<MudTable Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" ServerData="@(new Func<TableState, Task<TableData<BlogArticle>>>(ServerReload))" @bind-SelectedItem="selectedItem" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Blog Articles</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Title</MudTh>
        <MudTh>Author</MudTh>
        <MudTh>Publish Date</MudTh>
        <MudTh>Slug</MudTh>
        <MudTh>Id</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Author">@context.Author</MudTd>
        <MudTd DataLabel="Publish Date">@context.PublishedDate</MudTd>
        <MudTd DataLabel="Slug">@context.Slug</MudTd>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Link"><MudButton Class="mt-3" Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" Link="@($"blog/edit/{context.Id}")">Edit</MudButton></MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<MudButton  Class="mt-3" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Link="blog/edit">Add New</MudButton>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private string searchString = "";
    private BlogArticle selectedItem = null;
    private HashSet<BlogArticle> selectedItems = new HashSet<BlogArticle>();

    public long Count { get; set; }

    private MudTable<BlogArticle> table;

    private async Task<TableData<BlogArticle>> ServerReload(TableState state)
    {
        var results = await mediator.Send(new GetBlogArticles.Query((state.Page * state.PageSize), state.PageSize, state.Page, searchString));
        Count = results.Count;
        return new TableData<BlogArticle> { TotalItems = Convert.ToInt16(results.Count), Items = results.Articles };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

}