@page "/imagefiles"

@attribute [Authorize]

@inject IMediator mediator


<MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<LandingPage,bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Landing Pages</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Title</MudTh>
        <MudTh>Hero Title</MudTh>
        <MudTh>Slug</MudTh>
        <MudTh>Id</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Author">@context.HeroTitle</MudTd>
        <MudTd DataLabel="Slug">@context.Slug</MudTd>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Link"><MudButton Class="mt-3" Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" Link="@($"landingpage/edit/{context.Id}")">Edit</MudButton></MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<MudButton Class="mt-3" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Link="landingpage/edit">Add New</MudButton>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private string searchString = "";
    private LandingPage selectedItem = null;
    private HashSet<LandingPage> selectedItems = new HashSet<LandingPage>();

    public long Count { get; set; }
    public int CurrentPage { get; set; }
    public bool NextPage => (CurrentPage * PageSize) <= Count;
    public int PageSize { get; set; } = 10;
    public int Skip => ((CurrentPage - 1) * PageSize);
    public bool PreviousPage => (CurrentPage > 1);
    public int TotalPages => (int)Math.Ceiling(decimal.Divide(Count, PageSize));

    private IEnumerable<LandingPage> Elements = new List<LandingPage>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();

    }

    private async Task LoadData()
    {
        CurrentPage = CurrentPage < 1 ? 1 : CurrentPage;

        var results = await mediator.Send(new GetLandingPages.Query(Skip, PageSize, CurrentPage));
        Elements = results.Data;
        Count = results.Count;
    }

    private bool FilterFunc(LandingPage element)
    {
        //if (string.IsNullOrWhiteSpace(searchString))
        //    return true;
        //if (element.Sign.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        //if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        //if ($"{element.Number} {element.Position} {element.Molar}".Contains(searchString))
        //    return true;
        return true;
    }

}