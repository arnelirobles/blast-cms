@page "/blog/edit"
@page "/blog/edit/{ArticleId}"

@attribute [Authorize]

@inject IMediator mediator
@inject IMapper mapper 

@using System.ComponentModel.DataAnnotations

<h3>Edit Blog Article</h3>

<div style="max-width: 400px;">
    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Title" HelperText="Unique Title"
                              @bind-Value="model.Title" For="@(() => model.Title)" />
                <MudTextField Label="Author" Class="mt-3"
                              @bind-Value="model.Author" For="@(() => model.Author)" />
                <MudTextField Label="Description" HelperText="Short summary for article" Class="mt-3"
                              @bind-Value="model.Description" For="@(() => model.Description)"  />
                
                <MudTextField Label="Slug" HelperText="Repeat the password" Class="mt-3"
                              @bind-Value="model.Slug" For="@(() => model.Slug)" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
            </MudCardActions>
        </MudCard>

        <MudExpansionPanels>
            <MudExpansionPanel Text="Show Validation Summary">
                @if (success)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudExpansionPanel>
        </MudExpansionPanels>
    </EditForm>
</div>

@code {

    private AlterBlogArticle.Command model { get; set; }

    [Parameter]
    public long? ArticleId { get; set; }

    protected override async Task OnInitializedAsync()
    {

        if (ArticleId == null)
        {
            model = new AlterBlogArticle.Command();
        }
        else
        {
            var results = await mediator.Send(new GetBlogArticle.Query(ArticleId.Value));
            model = mapper.Map<AlterBlogArticle.Command>(results.Article);
        }
    }


    bool success;

    private async Task OnValidSubmit(EditContext context)
    {

        await mediator.Send(model);
        success = true;
        StateHasChanged();
    }

}
